{"version":3,"sources":["PageLink.tsx","HeaderBar.tsx","SearchBar.tsx","SearchResults.tsx","ListingSnippet.tsx","util.ts","ListingCard.tsx","MapEmbed.tsx","NearbyListings.tsx","App.tsx","constants.ts","redux/stateFunctions.ts","redux/store.ts","index.tsx"],"names":["PageLink","props","clasList","activePage","name","href","className","HeaderBar","activePageLink","SearchBar","searchString","useSelector","state","searchInputString","dispatch","useDispatch","onSubmit","e","preventDefault","type","value","onChange","currentTarget","style","backgroundImage","SearchResults","loc","locations","searchResults","cardContent","src","image","alt","location","ListingSnippet","label","data","deepCopy","obj1","JSON","parse","stringify","everyThreeDigitsUnlessLast","formatNumberAsString","integer","toString","split","reverse","join","replace","formatPrice","price","myMap","ListingCard","starIcon","favorite","onClick","id","streetAddress","stopPropagation","handleFavClick","active","display","netAcreage","Math","round","NearbyListings","nearbyResults","resultCopy","shift","listings","map","locID","key","markerArray","focusResultIcon","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","blurredResultIcon","MapEmbed","appState","results","mapCenter","mapZoom","searchQuery","useEffect","zoomSnap","setView","tileLayer","attribution","subdomains","minZoom","maxZoom","ext","addTo","dispatchFn","markers","originalMarkersCount","length","i","remove","removeAllMarkers","forEach","idx","markerIcon","newMarker","marker","latitude","longitude","markerNode","bindPopup","addEventListener","target","openPopup","sourceTarget","_icon","push","updateMarkers","lat","lng","updateView","App","filterLocationsBySearch","searchStr","acc","lowerSearch","toLowerCase","includes","calcMapStateAndSortResults","unsortedResults","locs","markerCollection","latSum","longSum","sortedResults","locCount","center","largestDist","Object","values","reduce","mark","distFromCenter","sqrt","pow","max","calcMapZoom","sort","sortByDist","bind","newMapCenter","newMapZoom","locIdA","locIdB","aLat","aLng","bLat","bLng","cLat","cLng","initState","reducer","oldState","action","newState","trim","matchingIdx","findIndex","matchingElement","splice","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fab4b033.chunk.js","sourcesContent":["import React from 'react'\n\n//This component is a link in top <nav> of page\nconst PageLink: React.SFC<PageLinkProps> = (props: PageLinkProps) => {\n  //'active' class is conditional on activePage prop\n  const clasList: string = (props.activePage === props.name) ? \"active\" : \"\"\n  \n  return (\n    <a href={props.href} className={clasList}>\n      {props.name}\n    </a>\n  )\n}\n\nexport default PageLink","import React from 'react'\nimport PageLink from './PageLink'\n\n//This component is the header nav bard of the site\nconst HeaderBar: React.SFC<HeaderBarProps> = (props: HeaderBarProps) => {\n  const activePage = props.activePageLink\n\n  return (\n    <nav className=\"upper-navbar\">\n      <div className=\"nav-left\">\n        <h1 className=\"page-title\">LandGate</h1>\n        <PageLink href=\"#\" activePage={activePage} name=\"View Map\"/>\n        <PageLink href=\"#\" activePage={activePage} name=\"Lease / Sell\"/>\n        <PageLink href=\"#\" activePage={activePage} name=\"Buy\"/>\n        <PageLink href=\"#\" activePage={activePage} name=\"Appraise\"/>\n        <PageLink href=\"#\" activePage={activePage} name=\"About\"/>\n        <PageLink href=\"#\" activePage={activePage} name=\"Help\"/>\n      </div>\n      <div className=\"nav-right\">\n        <address><a className=\"telephone-link\" href=\"tel:855-867-3876\">855-867-3876</a></address>\n        <div className=\"account-button-grp\" >\n          <PageLink href=\"#\" activePage={activePage} name=\"Login\"/>\n          <PageLink href=\"#\" activePage={activePage} name=\"Sign Up\"/>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default HeaderBar","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n//This component is the search form section, left of the map.\nconst SearchBar: React.SFC = () => {\n\n  //searchString is string currently displayed in the input\n  const searchString: string = useSelector( (state: AppState) => state.searchInputString )\n  const dispatch: Function = useDispatch()\n  \n  //value of search input is managed by store\n  const updateSearchField = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch({type:\"UPDATE_SEARCH\",value:e.currentTarget.value})\n  }\n\n  const submitForm = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault()\n    dispatch({type:\"SUBMIT_SEARCH\"})\n  }\n\n  //backgroundImage defined in js instead of css for build-step relative pathing\n  const bckImg = {backgroundImage: \"url('assets/icons/search-icon.svg')\"}\n\n  return (\n    <section className=\"search-bar\">\n      <form onSubmit={submitForm}>\n        <div className=\"search-input-container\">\n        <input className=\"search-input\" value={searchString} onChange={updateSearchField}/>\n        <input className=\"search-submit\" type=\"submit\" value=\"\" style={bckImg}/>\n        </div>\n        <select className=\"search-catagory-select custom-dropdown-arrow\">\n          <option>Mineral Rights</option>\n        </select>\n      </form>\n    </section>\n  )\n}\n\nexport default SearchBar","import React from 'react'\nimport { useSelector } from 'react-redux'\n\n//This component is the Search Results section, left of the map.\nconst SearchResults: React.SFC = () => {\n  \n  //`loc` is the first element in the sorted search results. This matches the focused icon on the map\n  const loc: StateLocation = useSelector( (state: AppState) => state.locations[state.searchResults[0]] )\n\n  const cardContent: JSX.Element = (loc) ?\n  (\n    <>\n      <img className=\"search-result-img\" src={`assets/images/${loc.image}`} alt=\"property\"/>\n      <div className=\"search-result-info\">\n        <h4 className=\"search-result-name\">{loc.name}</h4>\n        <p className=\"search-result-location\">{loc.location}</p>\n        <p className=\"search-result-list-question\">Would you like to list property in this area?</p>\n        <div className=\"search-result-button-container\">\n          <button className=\"maroon-bkgd\">Yes</button>\n          <button className=\"grey-bkgd\">Need Help?</button>\n        </div>\n      </div>\n    </>\n  ) :\n  (\n    <></>\n  )\n\n  return (\n    <section className=\"search-results\">\n      <h3 className=\"map-aside-section-title\">Search Results</h3>\n      <div className=\"search-result-card\">\n        {cardContent}\n      </div>\n    </section>\n  )\n}\n\nexport default SearchResults","import React from 'react'\n\n//This component is one title and datum about a lot listing\nconst ListingSnippet: React.SFC<ListingSnippetProps> = (props: ListingSnippetProps) => {\n\n  return (\n    <>\n      <div className=\"list-data-label\">\n        {props.label}\n        <img className=\"info-icon\" src=\"assets/icons/iconmonstr-info-5-orange.svg\" alt=\"(info)\"/>\n      </div>\n      <div className=\"list-data\">\n        {props.data}\n      </div>\n    </>\n  )\n}\n\nexport default ListingSnippet","export function deepCopy (obj1: any): any {\n  return JSON.parse(JSON.stringify(obj1))\n}\n\nconst everyThreeDigitsUnlessLast: RegExp =\n            /(\\d{3})(?!$)/g\n//            ^      ^    ^\n//            |      |    -- repeat for all matches\n//            |      -- unless its followed by end of line\n//            -- capture group of three digits\n\nexport function formatNumberAsString (integer: number): string {\n  // 12345678 => `12,345,678`\n  // decimals not handled\n  return integer.toString()\n                .split('').reverse().join('')   //reverse string\n                .replace(everyThreeDigitsUnlessLast,'$1,') //add commas\n                .split('').reverse().join('')   //reverse string\n}\n\nexport function formatPrice (price: number): string {\n  // 12345678 => `$12,345,678`\n  return '$' + formatNumberAsString(price)\n}","import React from 'react'\nimport ListingSnippet from './ListingSnippet'\nimport { useDispatch } from 'react-redux'\nimport { formatPrice, formatNumberAsString } from './util'\n\n//This component is the property listing card\nconst ListingCard: React.SFC<ListingInfoProps> = (props: ListingInfoProps) => {\n\n  const dispatch = useDispatch()\n\n  //clicking on fav star will toggle favorite prop in store\n  function handleFavClick (id: string,e: React.MouseEvent<HTMLImageElement, MouseEvent>): void {\n    e.stopPropagation()\n    dispatch({type:\"TOGGLE_FAVORITE\",value:id})\n  }\n\n  //clicking on card selects the listing on map\n  function handleListingClick (id: string): void {\n    dispatch({type:\"SELECT_RESULT\",value:id})\n  }\n\n  const starIcon = (props.loc.favorite) ? \"assets/icons/filled-star.svg\" : \"assets/icons/empty-star.svg\"\n  \n    return (\n    <>\n      <div className=\"listing-card\" onClick={()=>handleListingClick(props.loc.name+props.loc.streetAddress)}>\n        <div className=\"listing-card-label\">Lot For Sale</div>\n        <div className=\"favorite-listing\">\n          <img className=\"listing-star-icon\" src={starIcon} alt=\"favorite\" onClick={(e)=>handleFavClick(props.loc.name+props.loc.streetAddress,e)}/>\n        </div>\n        <div className=\"listing-info\">\n          <div className=\"listing-col\">\n            <div className=\"list-name\">{props.loc.name}</div>\n            <div className=\"list-price\">{formatPrice(props.loc.price)}</div>\n            <div className=\"active-badge\" style={(!props.loc.active) ? {display:\"none\"} : {}}>\n              <div className=\"green-dot\"/>\n              Active\n            </div>\n          </div>\n          <div className=\"listing-col\">\n            <ListingSnippet label=\"Street Address\" data={props.loc.streetAddress}/>\n            <ListingSnippet label=\"Net Mineral Acreage\" data={formatNumberAsString(props.loc.netAcreage)}/>\n          </div>\n          <div className=\"listing-col\">\n            <ListingSnippet label=\"Location\" data={props.loc.location}/>\n            <ListingSnippet label=\"Price Per Acre\" data={formatPrice(Math.round(props.loc.price/props.loc.netAcreage))}/>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default ListingCard","import React, { useEffect } from 'react'\nimport L, { LeafletEvent } from 'leaflet'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formatPrice } from './util'\n\n//persistent Leaflet objects\nlet myMap: L.Map\nconst markerArray: Array<L.Marker> = []\nconst focusResultIcon = L.icon({\n  iconUrl: 'assets/icons/focused-map-marker.svg',\n  iconSize: [34, 50],\n  iconAnchor: [17, 50],\n  popupAnchor: [0, -53]\n})\nconst blurredResultIcon = L.icon({\n  iconUrl: 'assets/icons/blurred-map-marker.svg',\n  iconSize: [22, 32],\n  iconAnchor: [11, 32],\n  popupAnchor: [0, -35]\n})\n\n\n//This component is the Leaflet map\nconst MapEmbed: React.SFC = () => {\n  \n  //access and reference state variables from store\n  const appState: AppState = useSelector( (state: AppState) => state )\n  const results: Array<string> = appState.searchResults\n  const mapCenter: {lat: number, lng: number} | null = appState.mapCenter\n  const mapZoom: number | null = appState.mapZoom\n  const locations: StateLocationSet = appState.locations\n  const searchQuery: string = appState.searchQuery\n  const dispatch = useDispatch()\n  \n  //only called once, on initial render\n  useEffect(()=>initMap(),[])\n  \n  //`updateMarkers()` depends only on sorted search `results`\n  // the next line throws a useEffect dependency warning - dependencies are thought through and intentional\n  // eslint-disable-next-line\n  useEffect(()=>updateMarkers(results,locations,dispatch),[JSON.stringify(results)])\n\n  \n  //`updateView()` depends on `zoom`, `mapCenter`, and `searchQuery`\n  // the next line throws a useEffect dependency warning - dependencies are thought through and intentional\n  // eslint-disable-next-line\n  useEffect( ()=>updateView(mapCenter,mapZoom) ,[mapCenter?.lat,mapCenter?.lng,mapZoom,searchQuery])\n\n  return (\n    <figure className=\"map-embed\">\n      <div id=\"map\"/>\n    </figure>\n  )\n}\n\n//Map initialization; runs once at render\nfunction initMap () {\n  myMap = L.map('map',{zoomSnap: .25}).setView([0,0], 4.6)\n  const Stamen_Terrain =\n  L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}',\n  {\n    attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    subdomains: 'abcd',\n    minZoom: 4,\n    maxZoom: 13,\n    // @ts-ignore - @types/leaflet isn't up to date with leaflet.\n    // This prop is required by lib, but not included by type definition.\n    ext: 'png'\n  })\n  Stamen_Terrain.addTo(myMap)\n}\n\n//Runs every time sorted search results updates\nfunction updateMarkers (results: Array<string>,locations: StateLocationSet,dispatchFn: Function) {\n  removeAllMarkers(markerArray)\n\n  results.forEach( (locID,idx) => {\n    const markerIcon = (idx === 0) ? focusResultIcon : blurredResultIcon\n    const newMarker = L.marker([locations[locID].latitude,locations[locID].longitude],{\n      icon: markerIcon,\n      alt: locations[locID].name + locations[locID].streetAddress\n    })\n    \n    const markerNode = newMarker.addTo(myMap)\n\n    markerNode.bindPopup(renderPopup(locations[locID]))\n\n    markerNode.addEventListener('mouseover', (e: LeafletEvent) => {\n      e.target.openPopup();\n    })\n\n    markerNode.addEventListener('click', (e: LeafletEvent) => {\n      const locID = e.sourceTarget._icon.alt\n      dispatchFn({type:\"SELECT_RESULT\",value: locID})\n    })\n\n    markerArray.push(newMarker)\n  })\n}\n\n//Runs every time map view changes to new number value in state\nfunction updateView (mapCenter: {lat:number,lng:number} | null,mapZoom: number | null) {\n  if (mapCenter && mapZoom) {\n    myMap.setView([mapCenter.lat,mapCenter.lng],mapZoom)\n  }\n}\n\n//for every marker in array, remove it from map AND from array\nfunction removeAllMarkers (markers: Array<L.Marker>): void {\n  const originalMarkersCount = markers.length\n  for(let i=0;i<originalMarkersCount;i++) {\n    markers[0].remove()\n    markers.shift()\n  }\n}\n\n//`renderPopup()` returns HTML string for popup for the given location\nfunction renderPopup (loc: StateLocation): string {\n  return `\n    <div class=\"popup-container\">\n      <div class=\"list-name\">\n      ${loc.name}\n      </div>\n      <div class=\"list-price\">\n        ${formatPrice(loc.price)}\n      </div>\n      <div class=\"list-data-label\">\n      Net Mineral Acreage\n      </div>\n      <div class=\"list-data\">\n      ${loc.netAcreage}\n      </div>\n    </div>\n  `\n}\n\nexport default MapEmbed","import React from 'react'\nimport ListingCard from './ListingCard'\nimport { useSelector } from 'react-redux'\nimport { deepCopy } from './util'\n\n//This component is the Nearby Listings section, left of the map.\nconst NearbyListings: React.SFC = () => {\n\n  //`nearbyResults` is the sorted search results excluding the first (focused on map)\n  const nearbyResults: Array<string> = useSelector( (state: AppState) => { \n    const resultCopy = deepCopy(state.searchResults)\n    resultCopy.shift()\n    return resultCopy\n  })\n\n  //`locations` is the complete set of locations in state\n  const locations: StateLocationSet = useSelector( (state: AppState) => state.locations )\n\n  //`listings` is the rendering nearbyResults\n  const listings = nearbyResults.map( (locID) => {\n    return (\n      <ListingCard key={locations[locID].name+locations[locID].location} loc={locations[locID]}/>\n    )\n  })\n\n  return (\n    <section className=\"listings\">\n      <h3 className=\"map-aside-section-title\">Nearby Listings</h3>\n      <div className=\"listings-container\">\n        {listings}\n        <div className=\"listing-spacer\"/>\n      </div>\n    </section>\n  )\n}\n\nexport default NearbyListings","import React, { useEffect } from 'react'\nimport HeaderBar from './HeaderBar'\nimport './App.css'\nimport { useDispatch } from 'react-redux'\nimport SearchBar from './SearchBar'\nimport SearchResults from './SearchResults'\nimport NearbyListings from './NearbyListings'\nimport MapEmbed from './MapEmbed'\n\nfunction App() {\n\n  const dispatch = useDispatch()\n\n  //loads dummy data into `locations` state\n  useEffect( ()=> {\n    dispatch({type: \"POPULATE_LOCATIONS\"})\n  })\n\n  return (\n    <div className=\"app\">\n      <HeaderBar activePageLink=\"Lease / Sell\" />\n      <div className=\"map-app\">\n        <aside className=\"map-aside\">\n          <SearchBar />\n          <SearchResults />\n          <NearbyListings />\n        </aside>\n        <MapEmbed />\n      </div>\n    </div>\n  );\n}\n\nexport default App","export const locations: Array<LotLocation> = [\n  {\n    name: \"Country Road Lot 266\",\n    price: 395000,\n    streetAddress: \"10181 County Road 266\",\n    location: \"Rochelle, TX\",\n    netAcreage: 80.84,\n    active: true,\n    latitude: 31.435990,\n    longitude: -99.030230,\n    image: \"cr_lot_266.jpg\"\n  },\n  {\n    name: \"Country Road Lot 310\",\n    price: 286790,\n    streetAddress: \"168 County Road 310\",\n    location: \"Gouldbusk, TX\",\n    netAcreage: 168.7,\n    active: true,\n    latitude: 31.569520,\n    longitude: -99.477880,\n    image: \"cr_lot_310.jpg\"\n  },\n  {\n    name: \"FM Lot 1929\",\n    price: 65000,\n    streetAddress: \"15040 Fm 1929 E\",\n    location: \"Millersview, TX\",\n    netAcreage: 6.83,\n    active: false,\n    latitude: 31.500940,\n    longitude: -99.721330,\n    image: \"fm_lot_1929.jpg\"\n  },\n  {\n    name: \"FM Lot 503\",\n    price: 495000,\n    streetAddress: \"6692 Fm #503\",\n    location: \"Brady, TX 76836\",\n    netAcreage: 198,\n    active: true,\n    latitude: 31.021270,\n    longitude: -99.464190,\n    image: \"fm_lot_503.jpg\"\n  },\n  {\n    name: \"Country Road Lot 312\",\n    price: 1993600,\n    streetAddress: \"3408 County Road 312\",\n    location: \"Voss, TX\",\n    netAcreage: 712.72,\n    active: true,\n    latitude: 31.502700,\n    longitude: -99.586870,\n    image: \"cr_lot_312.jpg\"\n  },\n  {\n    name: \"Country Road Lot 362\",\n    price: 259000,\n    streetAddress: \"1006 County Road 362\",\n    location: \"Coleman, TX\",\n    netAcreage: 46.93,\n    active: false,\n    latitude: 31.71204,\n    longitude: -99.52108,\n    image: \"cr_lot_362.jpg\"\n  },\n  {\n    name: \"Country Road Lot 1343\",\n    price: 1425000,\n    streetAddress: \"8043 County Road 1343\",\n    location: \" Paint Rock, TX\",\n    netAcreage: 801.6,\n    active: true,\n    latitude: 31.826883,\n    longitude: -99.007297,\n    image: \"cr_lot_1343.jpg\"\n  },\n  {\n    name: \"FM Lot 503\",\n    price: 425000,\n    streetAddress: \"9401 Fm 503\",\n    location: \" Doole, TX\",\n    netAcreage: 52.26,\n    active: false,\n    latitude: 31.555611,\n    longitude: -99.56996,\n    image: \"fm_lot_503.jpg\"\n  },\n];\n","//Array Reducer function with a bound search string as first param\n//Filters locations and maps it to an array of LocationID's\nexport function filterLocationsBySearch (searchStr: string,acc: Array<string>,loc: StateLocation): Array<string> {\n  const lowerSearch = searchStr.toLowerCase()\n  //if the search is more than empty AND it matches name or address\n  if(lowerSearch.length > 0 &&\n      (loc.name.toLowerCase().includes(lowerSearch) ||\n       loc.streetAddress.toLowerCase().includes(lowerSearch))) {\n          const locID = loc.name+loc.streetAddress\n          acc.push(locID)\n  }\n  return acc\n}\n\n//using search results, calculates a new map view (based on result positions and distance from one another)\n//also sorts results by the distance from the chosen center of map\n//provides consistency in results, and a focused map marker as close to the center as possible with tight zoom\nexport function calcMapStateAndSortResults (state: AppState,unsortedResults: Array<string>): {newMapCenter: {lat:number,lng:number} | null, newMapZoom: number | null, sortedResults: Array<string>} {\n  const locs = state.locations\n  const markerCollection: MyLatLngArray = {}\n  let latSum = 0\n  let longSum = 0\n  \n  unsortedResults.forEach( (locID: string) => {\n    markerCollection[locID] = {lat:locs[locID].latitude, lng:locs[locID].longitude}\n    latSum += locs[locID].latitude\n    longSum += locs[locID].longitude\n  },{})\n  \n  let mapCenter: MyLatLng | null = null\n  let mapZoom: number | null = null\n  let sortedResults: Array<string> = []\n  \n  const locCount = unsortedResults.length\n  if(locCount > 0) {\n    mapCenter = {lat:latSum/locCount,lng:longSum/locCount}\n    mapZoom = calcMapZoom(markerCollection,mapCenter)\n  }\n  \n  if(mapCenter) {\n    sortedResults = unsortedResults.sort(sortByDist.bind(null,state,mapCenter))\n  }\n\n  return {\n    newMapCenter: mapCenter,\n    newMapZoom: mapZoom,\n    sortedResults: sortedResults\n  }\n}\n\n//array sort function with state bound as first param\nfunction sortByDist (state: AppState,center: {lat:number,lng:number},locIdA: string,locIdB: string): number {\n  const aLat = state.locations[locIdA].latitude\n  const aLng = state.locations[locIdA].longitude\n  const bLat = state.locations[locIdB].latitude\n  const bLng = state.locations[locIdB].longitude\n  const cLat = center.lat\n  const cLng = center.lng\n\n  const distA = Math.sqrt( Math.pow(cLat-aLat,2) + Math.pow(cLng-aLng,2) )\n  const distB = Math.sqrt( Math.pow(cLat-bLat,2) + Math.pow(cLng-bLng,2) )\n  return distA - distB\n}\n\n//calculates new map view given a set of locations\n//linear regression used as basis for zoom level given the geographic spread of results\nfunction calcMapZoom (markers: MyLatLngArray,center: MyLatLng) {\n  const largestDist = Object.values(markers).reduce( (acc: number, mark: MyLatLng): number => {\n    const distFromCenter = Math.sqrt( Math.pow(mark.lat - center.lat,2) + Math.pow(mark.lng-center.lng,2) )\n    return Math.max(acc,distFromCenter)\n  },0)\n  \n  return (largestDist === 0) ? 13 : -3 * largestDist + 11\n}","import { createStore, Reducer } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { locations } from '../constants'\nimport { deepCopy } from '../util'\nimport { filterLocationsBySearch,calcMapStateAndSortResults } from './stateFunctions'\n\n//State in which the app starts\nconst initState: AppState = {\n  locations: {},\n  searchInputString: \"\",\n  searchQuery: \"\",\n  searchResults: [],\n  mapCenter: {lat:31.4052,lng:-99.3351},\n  mapZoom: 6.5\n}\n\n//Reducer for this app's store\nconst reducer: Reducer<AppState, CustAction> = (oldState: (AppState | undefined),action: CustAction) => {\n  const newState: AppState = (oldState) ? deepCopy(oldState) : initState\n  \n  if (action.type === \"POPULATE_LOCATIONS\") {\n    newState.locations = locations.reduce( (acc,loc) => ({...acc,[loc.name+loc.streetAddress]:{...loc,favorite: false}}),{})\n  }\n\n  else if (action.type === \"TOGGLE_FAVORITE\" && typeof action.value === \"string\") {\n    newState.locations[action.value].favorite = !newState.locations[action.value].favorite\n  }\n\n  else if (action.type === \"UPDATE_SEARCH\" && typeof action.value === \"string\") {\n    newState.searchInputString = action.value\n  }\n\n  else if (action.type === \"SUBMIT_SEARCH\" && newState.searchInputString !== \"\") {\n    newState.searchInputString = newState.searchInputString.trim()\n    newState.searchQuery = newState.searchInputString\n\n    //filter by search and map to only id's\n    const unsortedSearchResults = Object.values(newState.locations).reduce(filterLocationsBySearch.bind(null,newState.searchQuery),[])\n\n    //create new map view and sort results by closet to center of view\n    const {newMapCenter,newMapZoom,sortedResults} = calcMapStateAndSortResults(newState,unsortedSearchResults)\n\n    //update state with new values\n    newState.mapCenter = newMapCenter\n    newState.mapZoom = newMapZoom\n    newState.searchResults = sortedResults\n  }\n\n  else if (action.type === \"SELECT_RESULT\" && typeof action.value === \"string\") {\n    //find matching index, splice the match out of the array and create a new array with it at the front\n    const matchingIdx: number = newState.searchResults.findIndex((locID)=>locID === action.value)\n    if(matchingIdx >= 0) {\n      const matchingElement: Array<string> = newState.searchResults.splice(matchingIdx,1)\n      newState.searchResults = [...matchingElement,...newState.searchResults]\n    }\n  }\n\n  return newState\n}\n\nexport default () => createStore(reducer,initState,composeWithDevTools())","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport createStore from './redux/store'\nimport 'leaflet/dist/leaflet.css'\n\nconst store = createStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}